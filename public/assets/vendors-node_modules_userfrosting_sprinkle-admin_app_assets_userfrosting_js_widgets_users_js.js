"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_userfrosting_sprinkle-admin_app_assets_userfrosting_js_widgets_users_js"],{

/***/ "./node_modules/@userfrosting/sprinkle-admin/app/assets/userfrosting/js/widgets/users.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/@userfrosting/sprinkle-admin/app/assets/userfrosting/js/widgets/users.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   attachUserForm: () => (/* binding */ attachUserForm),
/* harmony export */   bindUserButtons: () => (/* binding */ bindUserButtons),
/* harmony export */   bindUserCreationButton: () => (/* binding */ bindUserCreationButton),
/* harmony export */   toggleChangePasswordMode: () => (/* binding */ toggleChangePasswordMode),
/* harmony export */   toggleSetPasswordMode: () => (/* binding */ toggleSetPasswordMode),
/* harmony export */   updateUser: () => (/* binding */ updateUser)
/* harmony export */ });
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
/**
 * Users widget.  Sets up dropdowns, modals, etc for a table of users.
 */

/**
 * Set up the form in a modal after being successfully attached to the body.
 */
function attachUserForm() {
    $("body").on("renderSuccess.ufModal", function (data) {
        var modal = $(this).ufModal("getModal");
        var form = modal.find(".js-form");

        // Set up any widgets inside the modal
        form.find(".js-select2").select2({
            width: "100%",
        });

        // Set up the form for submission
        form.ufForm({
            validator: page.validators,
        }).on("submitSuccess.ufForm", function () {
            // Reload page on success
            window.location.reload();
        });

        toggleSetPasswordMode(modal, "link");

        // On submission, submit either the PUT request, or POST for a password reset, depending on the toggle state
        modal.find("input[name='change_password_mode']").click(function () {
            var changePasswordMode = $(this).val();
            toggleSetPasswordMode(modal, changePasswordMode);
        });
    });
}

/**
 * Enable/disable password fields when switch is toggled
 * Applies to 'creating' a user
 */
function toggleSetPasswordMode(el, changePasswordMode) {
    var form = el.find("form");
    if (changePasswordMode == "link") {
        $(".controls-password").find("input[type='password']").prop("disabled", true);
        // Form submits password reset request

        var validator = form.validate();
        if (validator) {
            //Iterate through named elements inside of the form, and mark them as error free
            el.find("input[type='password']").each(function () {
                validator.successList.push(this); //mark as error free
            });
            validator.resetForm(); //remove error class on name elements and clear history
            validator.reset(); //remove all error and success data
        }
        el.find("input[type='password']").closest(".form-group").removeClass("has-error has-success");
        el.find(".form-control-feedback").each(function () {
            $(this).remove();
        });
    } else {
        $(".controls-password").find("input[type='password']").prop("disabled", false);
    }
}

/**
 * Enable/disable password fields when switch is toggled
 * Applies to 'reseting' a users password
 */
function toggleChangePasswordMode(el, userName, changePasswordMode) {
    var form = el.find("form");
    if (changePasswordMode == "link") {
        $(".controls-password").find("input[type='password']").prop("disabled", true);
        // Form submits password reset request
        form.attr({
            method: "POST",
            action: site.uri.public + "/api/users/u/" + userName + "/password-reset",
        });

        var validator = form.validate();
        if (validator) {
            //Iterate through named elements inside of the form, and mark them as error free
            el.find("input[type='password']").each(function () {
                validator.successList.push(this); //mark as error free
            });
            validator.resetForm(); //remove error class on name elements and clear history
            validator.reset(); //remove all error and success data
        }
        el.find("input[type='password']").closest(".form-group").removeClass("has-error has-success");
        el.find(".form-control-feedback").each(function () {
            $(this).remove();
        });
    } else {
        $(".controls-password").find("input[type='password']").prop("disabled", false);
        // Form submits direct password update
        form.attr({
            method: "PUT",
            action: site.uri.public + "/api/users/u/" + userName + "/password",
        });
    }
}

/**
 * Update user field(s)
 */
function updateUser(userName, fieldName, fieldValue) {
    var data = {};
    data[fieldName] = fieldValue;
    data[site.csrf.keys.name] = site.csrf.name;
    data[site.csrf.keys.value] = site.csrf.value;

    var url = site.uri.public + "/api/users/u/" + userName + "/" + fieldName;
    var debugAjax = typeof site !== "undefined" && site.debug.ajax;

    return $.ajax({
        type: "PUT",
        url: url,
        data: data,
        dataType: debugAjax ? "html" : "json",
        converters: {
            // Override jQuery's strict JSON parsing
            "text json": function (result) {
                try {
                    // First try to use native browser parsing
                    if (typeof JSON === "object" && typeof JSON.parse === "function") {
                        return JSON.parse(result);
                    } else {
                        return $.parseJSON(result);
                    }
                } catch (e) {
                    // statements to handle any exceptions
                    console.log("Warning: Could not parse expected JSON response.");
                    return {};
                }
            },
        },
    })
        .fail(function (jqXHR) {
            // Error messages
            if (debugAjax && jqXHR.responseText) {
                document.write(jqXHR.responseText);
                document.close();
            } else {
                console.log("Error (" + jqXHR.status + "): " + jqXHR.responseText);

                // Display errors on failure
                // TODO: ufAlerts widget should have a 'destroy' method
                if (!$("#alerts-page").data("ufAlerts")) {
                    $("#alerts-page").ufAlerts();
                } else {
                    $("#alerts-page").ufAlerts("clear");
                }

                $("#alerts-page").ufAlerts("fetch").ufAlerts("render");
            }

            return jqXHR;
        })
        .done(function (response) {
            window.location.reload();
        });
}

/**
 * Link user action buttons, for example in a table or on a specific user's page.
 * @param {module:jQuery} el jQuery wrapped element to target.
 * @param {{delete_redirect: string}} options Options used to modify behaviour of button actions.
 */
function bindUserButtons(el, options) {
    if (!options) options = {};

    /**
     * Buttons that launch a modal dialog
     */
    // Edit general user details button
    el.find(".js-user-edit").click(function (e) {
        e.preventDefault();

        $("body").ufModal({
            sourceUrl: site.uri.public + "/modals/users/edit",
            ajaxParams: {
                user_name: $(this).data("user_name"),
            },
            msgTarget: $("#alerts-page"),
        });

        attachUserForm();
    });

    // Manage user roles button
    el.find(".js-user-roles").click(function (e) {
        e.preventDefault();

        var userName = $(this).data("user_name");
        $("body").ufModal({
            sourceUrl: site.uri.public + "/modals/users/roles",
            ajaxParams: {
                user_name: userName,
            },
            msgTarget: $("#alerts-page"),
        });

        $("body").on("renderSuccess.ufModal", function (data) {
            var modal = $(this).ufModal("getModal");
            var form = modal.find(".js-form");

            // Set up collection widget
            var roleWidget = modal.find(".js-form-roles");
            roleWidget.ufCollection({
                dropdown: {
                    ajax: {
                        url: site.uri.public + "/api/roles",
                    },
                    placeholder: "Select a role",
                },
                dropdownTemplate: modal.find("#user-roles-select-option").html(),
                rowTemplate: modal.find("#user-roles-row").html(),
            });

            // Get current roles and add to widget
            $.getJSON(site.uri.public + "/api/users/u/" + userName + "/roles").done(function (data) {
                $.each(data.rows, function (idx, role) {
                    role.text = role.name;
                    roleWidget.ufCollection("addRow", role);
                });
            });

            // Set up form for submission
            form.ufForm().on("submitSuccess.ufForm", function () {
                // Reload page on success
                window.location.reload();
            });
        });
    });

    // Change user password button
    el.find(".js-user-password").click(function (e) {
        e.preventDefault();

        var userName = $(this).data("user_name");
        $("body").ufModal({
            sourceUrl: site.uri.public + "/modals/users/password",
            ajaxParams: {
                user_name: userName,
            },
            msgTarget: $("#alerts-page"),
        });

        $("body").on("renderSuccess.ufModal", function () {
            var modal = $(this).ufModal("getModal");
            var form = modal.find(".js-form");

            // Set up form for submission
            form.ufForm({
                validator: page.validators,
            }).on("submitSuccess.ufForm", function () {
                // Reload page on success
                window.location.reload();
            });

            toggleChangePasswordMode(modal, userName, "link");

            // On submission, submit either the PUT request, or POST for a password reset, depending on the toggle state
            modal.find("input[name='change_password_mode']").click(function (e) {
                var changePasswordMode = $(this).val();
                toggleChangePasswordMode(modal, userName, changePasswordMode);
            });
        });
    });

    // Delete user button
    el.find(".js-user-delete").click(function (e) {
        e.preventDefault();

        $("body").ufModal({
            sourceUrl: site.uri.public + "/modals/users/confirm-delete",
            ajaxParams: {
                user_name: $(this).data("user_name"),
            },
            msgTarget: $("#alerts-page"),
        });

        $("body").on("renderSuccess.ufModal", function () {
            var modal = $(this).ufModal("getModal");
            var form = modal.find(".js-form");

            form.ufForm().on("submitSuccess.ufForm", function () {
                // Navigate or reload page on success
                if (options.delete_redirect) window.location.href = options.delete_redirect;
                else window.location.reload();
            });
        });
    });

    /**
     * Direct action buttons
     */
    el.find(".js-user-activate").click(function (e) {
        e.preventDefault();

        var btn = $(this);
        updateUser(btn.data("user_name"), "flag_verified", "1");
    });

    el.find(".js-user-enable").click(function () {
        var btn = $(this);
        updateUser(btn.data("user_name"), "flag_enabled", "1");
    });

    el.find(".js-user-disable").click(function () {
        var btn = $(this);
        updateUser(btn.data("user_name"), "flag_enabled", "0");
    });
}

function bindUserCreationButton(el) {
    // Link create button
    el.find(".js-user-create").click(function (e) {
        e.preventDefault();

        $("body").ufModal({
            sourceUrl: site.uri.public + "/modals/users/create",
            msgTarget: $("#alerts-page"),
        });

        attachUserForm();
    });
}




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfdXNlcmZyb3N0aW5nX3Nwcmlua2xlLWFkbWluX2FwcF9hc3NldHNfdXNlcmZyb3N0aW5nX2pzX3dpZGdldHNfdXNlcnNfanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksQ0FBQztBQUNMLG9CQUFvQixDQUFDO0FBQ3JCOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTOztBQUVUOztBQUVBO0FBQ0E7QUFDQSxxQ0FBcUMsQ0FBQztBQUN0QztBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLENBQUM7QUFDVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRDtBQUNsRCxhQUFhO0FBQ2IsbUNBQW1DO0FBQ25DLCtCQUErQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQSxZQUFZLENBQUM7QUFDYixTQUFTO0FBQ1QsTUFBTTtBQUNOLFFBQVEsQ0FBQztBQUNUO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLENBQUM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQsYUFBYTtBQUNiLG1DQUFtQztBQUNuQywrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0EsWUFBWSxDQUFDO0FBQ2IsU0FBUztBQUNULE1BQU07QUFDTixRQUFRLENBQUM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxXQUFXLENBQUM7QUFDWjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCLCtCQUErQixDQUFDO0FBQ2hDO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCLENBQUM7QUFDdEIsb0JBQW9CLENBQUM7QUFDckIsa0JBQWtCO0FBQ2xCLG9CQUFvQixDQUFDO0FBQ3JCOztBQUVBLGdCQUFnQixDQUFDO0FBQ2pCOztBQUVBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7O0FBRUE7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQixZQUFZLDBCQUEwQjtBQUN0QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsQ0FBQztBQUNUO0FBQ0E7QUFDQSwyQkFBMkIsQ0FBQztBQUM1QixhQUFhO0FBQ2IsdUJBQXVCLENBQUM7QUFDeEIsU0FBUzs7QUFFVDtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBOztBQUVBLHVCQUF1QixDQUFDO0FBQ3hCLFFBQVEsQ0FBQztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYix1QkFBdUIsQ0FBQztBQUN4QixTQUFTOztBQUVULFFBQVEsQ0FBQztBQUNULHdCQUF3QixDQUFDO0FBQ3pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsYUFBYTs7QUFFYjtBQUNBLFlBQVksQ0FBQztBQUNiLGdCQUFnQixDQUFDO0FBQ2pCO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCLENBQUM7QUFDeEIsUUFBUSxDQUFDO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLHVCQUF1QixDQUFDO0FBQ3hCLFNBQVM7O0FBRVQsUUFBUSxDQUFDO0FBQ1Qsd0JBQXdCLENBQUM7QUFDekI7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxhQUFhOztBQUViOztBQUVBO0FBQ0E7QUFDQSx5Q0FBeUMsQ0FBQztBQUMxQztBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1QsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUEsUUFBUSxDQUFDO0FBQ1Q7QUFDQTtBQUNBLDJCQUEyQixDQUFDO0FBQzVCLGFBQWE7QUFDYix1QkFBdUIsQ0FBQztBQUN4QixTQUFTOztBQUVULFFBQVEsQ0FBQztBQUNULHdCQUF3QixDQUFDO0FBQ3pCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVCxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCLENBQUM7QUFDbkI7QUFDQSxLQUFLOztBQUVMO0FBQ0Esa0JBQWtCLENBQUM7QUFDbkI7QUFDQSxLQUFLOztBQUVMO0FBQ0Esa0JBQWtCLENBQUM7QUFDbkI7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSxDQUFDO0FBQ1Q7QUFDQSx1QkFBdUIsQ0FBQztBQUN4QixTQUFTOztBQUVUO0FBQ0EsS0FBSztBQUNMOztBQUVnSSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdXNlcmZyb3N0aW5nL3Nwcmlua2xlLWFkbWluL2FwcC9hc3NldHMvdXNlcmZyb3N0aW5nL2pzL3dpZGdldHMvdXNlcnMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBVc2VycyB3aWRnZXQuICBTZXRzIHVwIGRyb3Bkb3ducywgbW9kYWxzLCBldGMgZm9yIGEgdGFibGUgb2YgdXNlcnMuXG4gKi9cblxuLyoqXG4gKiBTZXQgdXAgdGhlIGZvcm0gaW4gYSBtb2RhbCBhZnRlciBiZWluZyBzdWNjZXNzZnVsbHkgYXR0YWNoZWQgdG8gdGhlIGJvZHkuXG4gKi9cbmZ1bmN0aW9uIGF0dGFjaFVzZXJGb3JtKCkge1xuICAgICQoXCJib2R5XCIpLm9uKFwicmVuZGVyU3VjY2Vzcy51Zk1vZGFsXCIsIGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZhciBtb2RhbCA9ICQodGhpcykudWZNb2RhbChcImdldE1vZGFsXCIpO1xuICAgICAgICB2YXIgZm9ybSA9IG1vZGFsLmZpbmQoXCIuanMtZm9ybVwiKTtcblxuICAgICAgICAvLyBTZXQgdXAgYW55IHdpZGdldHMgaW5zaWRlIHRoZSBtb2RhbFxuICAgICAgICBmb3JtLmZpbmQoXCIuanMtc2VsZWN0MlwiKS5zZWxlY3QyKHtcbiAgICAgICAgICAgIHdpZHRoOiBcIjEwMCVcIixcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gU2V0IHVwIHRoZSBmb3JtIGZvciBzdWJtaXNzaW9uXG4gICAgICAgIGZvcm0udWZGb3JtKHtcbiAgICAgICAgICAgIHZhbGlkYXRvcjogcGFnZS52YWxpZGF0b3JzLFxuICAgICAgICB9KS5vbihcInN1Ym1pdFN1Y2Nlc3MudWZGb3JtXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIFJlbG9hZCBwYWdlIG9uIHN1Y2Nlc3NcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdG9nZ2xlU2V0UGFzc3dvcmRNb2RlKG1vZGFsLCBcImxpbmtcIik7XG5cbiAgICAgICAgLy8gT24gc3VibWlzc2lvbiwgc3VibWl0IGVpdGhlciB0aGUgUFVUIHJlcXVlc3QsIG9yIFBPU1QgZm9yIGEgcGFzc3dvcmQgcmVzZXQsIGRlcGVuZGluZyBvbiB0aGUgdG9nZ2xlIHN0YXRlXG4gICAgICAgIG1vZGFsLmZpbmQoXCJpbnB1dFtuYW1lPSdjaGFuZ2VfcGFzc3dvcmRfbW9kZSddXCIpLmNsaWNrKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBjaGFuZ2VQYXNzd29yZE1vZGUgPSAkKHRoaXMpLnZhbCgpO1xuICAgICAgICAgICAgdG9nZ2xlU2V0UGFzc3dvcmRNb2RlKG1vZGFsLCBjaGFuZ2VQYXNzd29yZE1vZGUpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBFbmFibGUvZGlzYWJsZSBwYXNzd29yZCBmaWVsZHMgd2hlbiBzd2l0Y2ggaXMgdG9nZ2xlZFxuICogQXBwbGllcyB0byAnY3JlYXRpbmcnIGEgdXNlclxuICovXG5mdW5jdGlvbiB0b2dnbGVTZXRQYXNzd29yZE1vZGUoZWwsIGNoYW5nZVBhc3N3b3JkTW9kZSkge1xuICAgIHZhciBmb3JtID0gZWwuZmluZChcImZvcm1cIik7XG4gICAgaWYgKGNoYW5nZVBhc3N3b3JkTW9kZSA9PSBcImxpbmtcIikge1xuICAgICAgICAkKFwiLmNvbnRyb2xzLXBhc3N3b3JkXCIpLmZpbmQoXCJpbnB1dFt0eXBlPSdwYXNzd29yZCddXCIpLnByb3AoXCJkaXNhYmxlZFwiLCB0cnVlKTtcbiAgICAgICAgLy8gRm9ybSBzdWJtaXRzIHBhc3N3b3JkIHJlc2V0IHJlcXVlc3RcblxuICAgICAgICB2YXIgdmFsaWRhdG9yID0gZm9ybS52YWxpZGF0ZSgpO1xuICAgICAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICAgICAgICAvL0l0ZXJhdGUgdGhyb3VnaCBuYW1lZCBlbGVtZW50cyBpbnNpZGUgb2YgdGhlIGZvcm0sIGFuZCBtYXJrIHRoZW0gYXMgZXJyb3IgZnJlZVxuICAgICAgICAgICAgZWwuZmluZChcImlucHV0W3R5cGU9J3Bhc3N3b3JkJ11cIikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yLnN1Y2Nlc3NMaXN0LnB1c2godGhpcyk7IC8vbWFyayBhcyBlcnJvciBmcmVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhbGlkYXRvci5yZXNldEZvcm0oKTsgLy9yZW1vdmUgZXJyb3IgY2xhc3Mgb24gbmFtZSBlbGVtZW50cyBhbmQgY2xlYXIgaGlzdG9yeVxuICAgICAgICAgICAgdmFsaWRhdG9yLnJlc2V0KCk7IC8vcmVtb3ZlIGFsbCBlcnJvciBhbmQgc3VjY2VzcyBkYXRhXG4gICAgICAgIH1cbiAgICAgICAgZWwuZmluZChcImlucHV0W3R5cGU9J3Bhc3N3b3JkJ11cIikuY2xvc2VzdChcIi5mb3JtLWdyb3VwXCIpLnJlbW92ZUNsYXNzKFwiaGFzLWVycm9yIGhhcy1zdWNjZXNzXCIpO1xuICAgICAgICBlbC5maW5kKFwiLmZvcm0tY29udHJvbC1mZWVkYmFja1wiKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgICQoXCIuY29udHJvbHMtcGFzc3dvcmRcIikuZmluZChcImlucHV0W3R5cGU9J3Bhc3N3b3JkJ11cIikucHJvcChcImRpc2FibGVkXCIsIGZhbHNlKTtcbiAgICB9XG59XG5cbi8qKlxuICogRW5hYmxlL2Rpc2FibGUgcGFzc3dvcmQgZmllbGRzIHdoZW4gc3dpdGNoIGlzIHRvZ2dsZWRcbiAqIEFwcGxpZXMgdG8gJ3Jlc2V0aW5nJyBhIHVzZXJzIHBhc3N3b3JkXG4gKi9cbmZ1bmN0aW9uIHRvZ2dsZUNoYW5nZVBhc3N3b3JkTW9kZShlbCwgdXNlck5hbWUsIGNoYW5nZVBhc3N3b3JkTW9kZSkge1xuICAgIHZhciBmb3JtID0gZWwuZmluZChcImZvcm1cIik7XG4gICAgaWYgKGNoYW5nZVBhc3N3b3JkTW9kZSA9PSBcImxpbmtcIikge1xuICAgICAgICAkKFwiLmNvbnRyb2xzLXBhc3N3b3JkXCIpLmZpbmQoXCJpbnB1dFt0eXBlPSdwYXNzd29yZCddXCIpLnByb3AoXCJkaXNhYmxlZFwiLCB0cnVlKTtcbiAgICAgICAgLy8gRm9ybSBzdWJtaXRzIHBhc3N3b3JkIHJlc2V0IHJlcXVlc3RcbiAgICAgICAgZm9ybS5hdHRyKHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBhY3Rpb246IHNpdGUudXJpLnB1YmxpYyArIFwiL2FwaS91c2Vycy91L1wiICsgdXNlck5hbWUgKyBcIi9wYXNzd29yZC1yZXNldFwiLFxuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgdmFsaWRhdG9yID0gZm9ybS52YWxpZGF0ZSgpO1xuICAgICAgICBpZiAodmFsaWRhdG9yKSB7XG4gICAgICAgICAgICAvL0l0ZXJhdGUgdGhyb3VnaCBuYW1lZCBlbGVtZW50cyBpbnNpZGUgb2YgdGhlIGZvcm0sIGFuZCBtYXJrIHRoZW0gYXMgZXJyb3IgZnJlZVxuICAgICAgICAgICAgZWwuZmluZChcImlucHV0W3R5cGU9J3Bhc3N3b3JkJ11cIikuZWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yLnN1Y2Nlc3NMaXN0LnB1c2godGhpcyk7IC8vbWFyayBhcyBlcnJvciBmcmVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZhbGlkYXRvci5yZXNldEZvcm0oKTsgLy9yZW1vdmUgZXJyb3IgY2xhc3Mgb24gbmFtZSBlbGVtZW50cyBhbmQgY2xlYXIgaGlzdG9yeVxuICAgICAgICAgICAgdmFsaWRhdG9yLnJlc2V0KCk7IC8vcmVtb3ZlIGFsbCBlcnJvciBhbmQgc3VjY2VzcyBkYXRhXG4gICAgICAgIH1cbiAgICAgICAgZWwuZmluZChcImlucHV0W3R5cGU9J3Bhc3N3b3JkJ11cIikuY2xvc2VzdChcIi5mb3JtLWdyb3VwXCIpLnJlbW92ZUNsYXNzKFwiaGFzLWVycm9yIGhhcy1zdWNjZXNzXCIpO1xuICAgICAgICBlbC5maW5kKFwiLmZvcm0tY29udHJvbC1mZWVkYmFja1wiKS5lYWNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQodGhpcykucmVtb3ZlKCk7XG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgICQoXCIuY29udHJvbHMtcGFzc3dvcmRcIikuZmluZChcImlucHV0W3R5cGU9J3Bhc3N3b3JkJ11cIikucHJvcChcImRpc2FibGVkXCIsIGZhbHNlKTtcbiAgICAgICAgLy8gRm9ybSBzdWJtaXRzIGRpcmVjdCBwYXNzd29yZCB1cGRhdGVcbiAgICAgICAgZm9ybS5hdHRyKHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgICAgICAgIGFjdGlvbjogc2l0ZS51cmkucHVibGljICsgXCIvYXBpL3VzZXJzL3UvXCIgKyB1c2VyTmFtZSArIFwiL3Bhc3N3b3JkXCIsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cblxuLyoqXG4gKiBVcGRhdGUgdXNlciBmaWVsZChzKVxuICovXG5mdW5jdGlvbiB1cGRhdGVVc2VyKHVzZXJOYW1lLCBmaWVsZE5hbWUsIGZpZWxkVmFsdWUpIHtcbiAgICB2YXIgZGF0YSA9IHt9O1xuICAgIGRhdGFbZmllbGROYW1lXSA9IGZpZWxkVmFsdWU7XG4gICAgZGF0YVtzaXRlLmNzcmYua2V5cy5uYW1lXSA9IHNpdGUuY3NyZi5uYW1lO1xuICAgIGRhdGFbc2l0ZS5jc3JmLmtleXMudmFsdWVdID0gc2l0ZS5jc3JmLnZhbHVlO1xuXG4gICAgdmFyIHVybCA9IHNpdGUudXJpLnB1YmxpYyArIFwiL2FwaS91c2Vycy91L1wiICsgdXNlck5hbWUgKyBcIi9cIiArIGZpZWxkTmFtZTtcbiAgICB2YXIgZGVidWdBamF4ID0gdHlwZW9mIHNpdGUgIT09IFwidW5kZWZpbmVkXCIgJiYgc2l0ZS5kZWJ1Zy5hamF4O1xuXG4gICAgcmV0dXJuICQuYWpheCh7XG4gICAgICAgIHR5cGU6IFwiUFVUXCIsXG4gICAgICAgIHVybDogdXJsLFxuICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICBkYXRhVHlwZTogZGVidWdBamF4ID8gXCJodG1sXCIgOiBcImpzb25cIixcbiAgICAgICAgY29udmVydGVyczoge1xuICAgICAgICAgICAgLy8gT3ZlcnJpZGUgalF1ZXJ5J3Mgc3RyaWN0IEpTT04gcGFyc2luZ1xuICAgICAgICAgICAgXCJ0ZXh0IGpzb25cIjogZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZpcnN0IHRyeSB0byB1c2UgbmF0aXZlIGJyb3dzZXIgcGFyc2luZ1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIEpTT04gPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIEpTT04ucGFyc2UgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkLnBhcnNlSlNPTihyZXN1bHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBzdGF0ZW1lbnRzIHRvIGhhbmRsZSBhbnkgZXhjZXB0aW9uc1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIldhcm5pbmc6IENvdWxkIG5vdCBwYXJzZSBleHBlY3RlZCBKU09OIHJlc3BvbnNlLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgfSlcbiAgICAgICAgLmZhaWwoZnVuY3Rpb24gKGpxWEhSKSB7XG4gICAgICAgICAgICAvLyBFcnJvciBtZXNzYWdlc1xuICAgICAgICAgICAgaWYgKGRlYnVnQWpheCAmJiBqcVhIUi5yZXNwb25zZVRleHQpIHtcbiAgICAgICAgICAgICAgICBkb2N1bWVudC53cml0ZShqcVhIUi5yZXNwb25zZVRleHQpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmNsb3NlKCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3IgKFwiICsganFYSFIuc3RhdHVzICsgXCIpOiBcIiArIGpxWEhSLnJlc3BvbnNlVGV4dCk7XG5cbiAgICAgICAgICAgICAgICAvLyBEaXNwbGF5IGVycm9ycyBvbiBmYWlsdXJlXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogdWZBbGVydHMgd2lkZ2V0IHNob3VsZCBoYXZlIGEgJ2Rlc3Ryb3knIG1ldGhvZFxuICAgICAgICAgICAgICAgIGlmICghJChcIiNhbGVydHMtcGFnZVwiKS5kYXRhKFwidWZBbGVydHNcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgJChcIiNhbGVydHMtcGFnZVwiKS51ZkFsZXJ0cygpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICQoXCIjYWxlcnRzLXBhZ2VcIikudWZBbGVydHMoXCJjbGVhclwiKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAkKFwiI2FsZXJ0cy1wYWdlXCIpLnVmQWxlcnRzKFwiZmV0Y2hcIikudWZBbGVydHMoXCJyZW5kZXJcIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBqcVhIUjtcbiAgICAgICAgfSlcbiAgICAgICAgLmRvbmUoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgIH0pO1xufVxuXG4vKipcbiAqIExpbmsgdXNlciBhY3Rpb24gYnV0dG9ucywgZm9yIGV4YW1wbGUgaW4gYSB0YWJsZSBvciBvbiBhIHNwZWNpZmljIHVzZXIncyBwYWdlLlxuICogQHBhcmFtIHttb2R1bGU6alF1ZXJ5fSBlbCBqUXVlcnkgd3JhcHBlZCBlbGVtZW50IHRvIHRhcmdldC5cbiAqIEBwYXJhbSB7e2RlbGV0ZV9yZWRpcmVjdDogc3RyaW5nfX0gb3B0aW9ucyBPcHRpb25zIHVzZWQgdG8gbW9kaWZ5IGJlaGF2aW91ciBvZiBidXR0b24gYWN0aW9ucy5cbiAqL1xuZnVuY3Rpb24gYmluZFVzZXJCdXR0b25zKGVsLCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG5cbiAgICAvKipcbiAgICAgKiBCdXR0b25zIHRoYXQgbGF1bmNoIGEgbW9kYWwgZGlhbG9nXG4gICAgICovXG4gICAgLy8gRWRpdCBnZW5lcmFsIHVzZXIgZGV0YWlscyBidXR0b25cbiAgICBlbC5maW5kKFwiLmpzLXVzZXItZWRpdFwiKS5jbGljayhmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgJChcImJvZHlcIikudWZNb2RhbCh7XG4gICAgICAgICAgICBzb3VyY2VVcmw6IHNpdGUudXJpLnB1YmxpYyArIFwiL21vZGFscy91c2Vycy9lZGl0XCIsXG4gICAgICAgICAgICBhamF4UGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgdXNlcl9uYW1lOiAkKHRoaXMpLmRhdGEoXCJ1c2VyX25hbWVcIiksXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbXNnVGFyZ2V0OiAkKFwiI2FsZXJ0cy1wYWdlXCIpLFxuICAgICAgICB9KTtcblxuICAgICAgICBhdHRhY2hVc2VyRm9ybSgpO1xuICAgIH0pO1xuXG4gICAgLy8gTWFuYWdlIHVzZXIgcm9sZXMgYnV0dG9uXG4gICAgZWwuZmluZChcIi5qcy11c2VyLXJvbGVzXCIpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICB2YXIgdXNlck5hbWUgPSAkKHRoaXMpLmRhdGEoXCJ1c2VyX25hbWVcIik7XG4gICAgICAgICQoXCJib2R5XCIpLnVmTW9kYWwoe1xuICAgICAgICAgICAgc291cmNlVXJsOiBzaXRlLnVyaS5wdWJsaWMgKyBcIi9tb2RhbHMvdXNlcnMvcm9sZXNcIixcbiAgICAgICAgICAgIGFqYXhQYXJhbXM6IHtcbiAgICAgICAgICAgICAgICB1c2VyX25hbWU6IHVzZXJOYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1zZ1RhcmdldDogJChcIiNhbGVydHMtcGFnZVwiKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJChcImJvZHlcIikub24oXCJyZW5kZXJTdWNjZXNzLnVmTW9kYWxcIiwgZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgICAgIHZhciBtb2RhbCA9ICQodGhpcykudWZNb2RhbChcImdldE1vZGFsXCIpO1xuICAgICAgICAgICAgdmFyIGZvcm0gPSBtb2RhbC5maW5kKFwiLmpzLWZvcm1cIik7XG5cbiAgICAgICAgICAgIC8vIFNldCB1cCBjb2xsZWN0aW9uIHdpZGdldFxuICAgICAgICAgICAgdmFyIHJvbGVXaWRnZXQgPSBtb2RhbC5maW5kKFwiLmpzLWZvcm0tcm9sZXNcIik7XG4gICAgICAgICAgICByb2xlV2lkZ2V0LnVmQ29sbGVjdGlvbih7XG4gICAgICAgICAgICAgICAgZHJvcGRvd246IHtcbiAgICAgICAgICAgICAgICAgICAgYWpheDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBzaXRlLnVyaS5wdWJsaWMgKyBcIi9hcGkvcm9sZXNcIixcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiU2VsZWN0IGEgcm9sZVwiLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZHJvcGRvd25UZW1wbGF0ZTogbW9kYWwuZmluZChcIiN1c2VyLXJvbGVzLXNlbGVjdC1vcHRpb25cIikuaHRtbCgpLFxuICAgICAgICAgICAgICAgIHJvd1RlbXBsYXRlOiBtb2RhbC5maW5kKFwiI3VzZXItcm9sZXMtcm93XCIpLmh0bWwoKSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyBHZXQgY3VycmVudCByb2xlcyBhbmQgYWRkIHRvIHdpZGdldFxuICAgICAgICAgICAgJC5nZXRKU09OKHNpdGUudXJpLnB1YmxpYyArIFwiL2FwaS91c2Vycy91L1wiICsgdXNlck5hbWUgKyBcIi9yb2xlc1wiKS5kb25lKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgJC5lYWNoKGRhdGEucm93cywgZnVuY3Rpb24gKGlkeCwgcm9sZSkge1xuICAgICAgICAgICAgICAgICAgICByb2xlLnRleHQgPSByb2xlLm5hbWU7XG4gICAgICAgICAgICAgICAgICAgIHJvbGVXaWRnZXQudWZDb2xsZWN0aW9uKFwiYWRkUm93XCIsIHJvbGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFNldCB1cCBmb3JtIGZvciBzdWJtaXNzaW9uXG4gICAgICAgICAgICBmb3JtLnVmRm9ybSgpLm9uKFwic3VibWl0U3VjY2Vzcy51ZkZvcm1cIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIC8vIFJlbG9hZCBwYWdlIG9uIHN1Y2Nlc3NcbiAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvLyBDaGFuZ2UgdXNlciBwYXNzd29yZCBidXR0b25cbiAgICBlbC5maW5kKFwiLmpzLXVzZXItcGFzc3dvcmRcIikuY2xpY2soZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIHZhciB1c2VyTmFtZSA9ICQodGhpcykuZGF0YShcInVzZXJfbmFtZVwiKTtcbiAgICAgICAgJChcImJvZHlcIikudWZNb2RhbCh7XG4gICAgICAgICAgICBzb3VyY2VVcmw6IHNpdGUudXJpLnB1YmxpYyArIFwiL21vZGFscy91c2Vycy9wYXNzd29yZFwiLFxuICAgICAgICAgICAgYWpheFBhcmFtczoge1xuICAgICAgICAgICAgICAgIHVzZXJfbmFtZTogdXNlck5hbWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbXNnVGFyZ2V0OiAkKFwiI2FsZXJ0cy1wYWdlXCIpLFxuICAgICAgICB9KTtcblxuICAgICAgICAkKFwiYm9keVwiKS5vbihcInJlbmRlclN1Y2Nlc3MudWZNb2RhbFwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgbW9kYWwgPSAkKHRoaXMpLnVmTW9kYWwoXCJnZXRNb2RhbFwiKTtcbiAgICAgICAgICAgIHZhciBmb3JtID0gbW9kYWwuZmluZChcIi5qcy1mb3JtXCIpO1xuXG4gICAgICAgICAgICAvLyBTZXQgdXAgZm9ybSBmb3Igc3VibWlzc2lvblxuICAgICAgICAgICAgZm9ybS51ZkZvcm0oe1xuICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogcGFnZS52YWxpZGF0b3JzLFxuICAgICAgICAgICAgfSkub24oXCJzdWJtaXRTdWNjZXNzLnVmRm9ybVwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVsb2FkIHBhZ2Ugb24gc3VjY2Vzc1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0b2dnbGVDaGFuZ2VQYXNzd29yZE1vZGUobW9kYWwsIHVzZXJOYW1lLCBcImxpbmtcIik7XG5cbiAgICAgICAgICAgIC8vIE9uIHN1Ym1pc3Npb24sIHN1Ym1pdCBlaXRoZXIgdGhlIFBVVCByZXF1ZXN0LCBvciBQT1NUIGZvciBhIHBhc3N3b3JkIHJlc2V0LCBkZXBlbmRpbmcgb24gdGhlIHRvZ2dsZSBzdGF0ZVxuICAgICAgICAgICAgbW9kYWwuZmluZChcImlucHV0W25hbWU9J2NoYW5nZV9wYXNzd29yZF9tb2RlJ11cIikuY2xpY2soZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgICB2YXIgY2hhbmdlUGFzc3dvcmRNb2RlID0gJCh0aGlzKS52YWwoKTtcbiAgICAgICAgICAgICAgICB0b2dnbGVDaGFuZ2VQYXNzd29yZE1vZGUobW9kYWwsIHVzZXJOYW1lLCBjaGFuZ2VQYXNzd29yZE1vZGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLy8gRGVsZXRlIHVzZXIgYnV0dG9uXG4gICAgZWwuZmluZChcIi5qcy11c2VyLWRlbGV0ZVwiKS5jbGljayhmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgJChcImJvZHlcIikudWZNb2RhbCh7XG4gICAgICAgICAgICBzb3VyY2VVcmw6IHNpdGUudXJpLnB1YmxpYyArIFwiL21vZGFscy91c2Vycy9jb25maXJtLWRlbGV0ZVwiLFxuICAgICAgICAgICAgYWpheFBhcmFtczoge1xuICAgICAgICAgICAgICAgIHVzZXJfbmFtZTogJCh0aGlzKS5kYXRhKFwidXNlcl9uYW1lXCIpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG1zZ1RhcmdldDogJChcIiNhbGVydHMtcGFnZVwiKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgJChcImJvZHlcIikub24oXCJyZW5kZXJTdWNjZXNzLnVmTW9kYWxcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG1vZGFsID0gJCh0aGlzKS51Zk1vZGFsKFwiZ2V0TW9kYWxcIik7XG4gICAgICAgICAgICB2YXIgZm9ybSA9IG1vZGFsLmZpbmQoXCIuanMtZm9ybVwiKTtcblxuICAgICAgICAgICAgZm9ybS51ZkZvcm0oKS5vbihcInN1Ym1pdFN1Y2Nlc3MudWZGb3JtXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAvLyBOYXZpZ2F0ZSBvciByZWxvYWQgcGFnZSBvbiBzdWNjZXNzXG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGVsZXRlX3JlZGlyZWN0KSB3aW5kb3cubG9jYXRpb24uaHJlZiA9IG9wdGlvbnMuZGVsZXRlX3JlZGlyZWN0O1xuICAgICAgICAgICAgICAgIGVsc2Ugd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogRGlyZWN0IGFjdGlvbiBidXR0b25zXG4gICAgICovXG4gICAgZWwuZmluZChcIi5qcy11c2VyLWFjdGl2YXRlXCIpLmNsaWNrKGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICB2YXIgYnRuID0gJCh0aGlzKTtcbiAgICAgICAgdXBkYXRlVXNlcihidG4uZGF0YShcInVzZXJfbmFtZVwiKSwgXCJmbGFnX3ZlcmlmaWVkXCIsIFwiMVwiKTtcbiAgICB9KTtcblxuICAgIGVsLmZpbmQoXCIuanMtdXNlci1lbmFibGVcIikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYnRuID0gJCh0aGlzKTtcbiAgICAgICAgdXBkYXRlVXNlcihidG4uZGF0YShcInVzZXJfbmFtZVwiKSwgXCJmbGFnX2VuYWJsZWRcIiwgXCIxXCIpO1xuICAgIH0pO1xuXG4gICAgZWwuZmluZChcIi5qcy11c2VyLWRpc2FibGVcIikuY2xpY2soZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYnRuID0gJCh0aGlzKTtcbiAgICAgICAgdXBkYXRlVXNlcihidG4uZGF0YShcInVzZXJfbmFtZVwiKSwgXCJmbGFnX2VuYWJsZWRcIiwgXCIwXCIpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBiaW5kVXNlckNyZWF0aW9uQnV0dG9uKGVsKSB7XG4gICAgLy8gTGluayBjcmVhdGUgYnV0dG9uXG4gICAgZWwuZmluZChcIi5qcy11c2VyLWNyZWF0ZVwiKS5jbGljayhmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgJChcImJvZHlcIikudWZNb2RhbCh7XG4gICAgICAgICAgICBzb3VyY2VVcmw6IHNpdGUudXJpLnB1YmxpYyArIFwiL21vZGFscy91c2Vycy9jcmVhdGVcIixcbiAgICAgICAgICAgIG1zZ1RhcmdldDogJChcIiNhbGVydHMtcGFnZVwiKSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXR0YWNoVXNlckZvcm0oKTtcbiAgICB9KTtcbn1cblxuZXhwb3J0IHsgYXR0YWNoVXNlckZvcm0sIHRvZ2dsZVNldFBhc3N3b3JkTW9kZSwgdG9nZ2xlQ2hhbmdlUGFzc3dvcmRNb2RlLCB1cGRhdGVVc2VyLCBiaW5kVXNlckJ1dHRvbnMsIGJpbmRVc2VyQ3JlYXRpb25CdXR0b24gfTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==